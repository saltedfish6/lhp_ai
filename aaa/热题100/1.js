/**
 * 两数之和 - 查找数组中和为目标值的两个整数的下标
 * 
 * 这个函数接收两个参数：
 * @param {number[]} nums - 整数数组，例如[2,7,11,15]
 * @param {number} target - 目标值，例如9
 * 
 * 函数会找出数组中两个加起来等于目标值的数字的位置
 * @return {number[]} - 返回这两个数字在数组中的位置（下标），例如[0,1]
 */
function twoSum(nums, target) {
    // 创建一个Map对象（哈希表）用来存储遍历过的数字和它们的位置
    // Map是JavaScript内置的一种数据结构，可以存储键值对
    // 在这里，键是数组中的数字，值是这个数字在数组中的位置（下标）
    const map = new Map();
    
    // 用for循环遍历数组中的每个数字
    // i是当前正在处理的数字的位置（下标）
    // 从0开始，到数组长度减1结束
    for (let i = 0; i < nums.length; i++) {
        // 对于当前数字nums[i]，计算它需要配对的另一个数字
        // 例如：如果目标是9，当前数字是2，那么需要找的另一个数字就是9-2=7
        const complement = target - nums[i];
        
        // 检查我们之前是否已经遇到过这个需要的数字（complement）
        // map.has(complement)会检查哈希表中是否存在这个数字
        if (map.get(complement)) {
            // 如果找到了配对的数字，就返回这两个数字的位置
            // map.get(complement)获取之前存储的那个数字的位置
            // i是当前数字的位置
            // 例如：如果在位置0发现了数字2，之后在位置1发现了数字7
            // 由于2+7=9（目标值），所以返回[0,1]
            return [map.get(complement), i];
        }
        
        // 如果没有找到配对的数字，就把当前数字和它的位置存入哈希表
        // 以便后续查找
        // 例如：存储 {2 => 0} 表示数字2在位置0
        map.set(nums[i], i);
    }
    
    // 如果遍历完整个数组都没有找到符合条件的两个数字
    // 就返回一个空数组
    // （根据题目假设，这种情况不会发生，因为题目保证有解）
    return [];
}

// 下面是测试示例，用来验证函数是否正确工作

// 示例1：数组[2,7,11,15]，目标值9
// 2+7=9，所以应该返回[0,1]（2在位置0，7在位置1）
console.log(twoSum([2, 7, 11, 15], 9)); // 预期输出: [0, 1]

// 示例2：数组[3,2,4]，目标值6
// 2+4=6，所以应该返回[1,2]（2在位置1，4在位置2）
console.log(twoSum([3, 2, 4], 6));      // 预期输出: [1, 2]

// 示例3：数组[3,3]，目标值6
// 3+3=6，所以应该返回[0,1]（两个3分别在位置0和位置1）
console.log(twoSum([3, 3], 6));         // 预期输出: [0, 1] 




